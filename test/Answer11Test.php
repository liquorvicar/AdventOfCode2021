<?php

namespace AdventOfCode;

class Answer11Test extends BaseTest
{
    /**
     * @var Answer11
     */
    protected $answer;

    public function setUp(): void
    {
        parent::setUp();
        $this->answer = new Answer11($this->logger);
    }

    public function testProcessStep()
    {
        $input = [
            [1,1,1,1,1,],
            [1,9,9,9,1,],
            [1,9,1,9,1,],
            [1,9,9,9,1,],
            [1,1,1,1,1,],
        ];
        $expected = [
            [3,4,5,4,3,],
            [4,0,0,0,4,],
            [5,0,0,0,5,],
            [4,0,0,0,4,],
            [3,4,5,4,3,],
        ];
        $result = $this->answer->processStep($input);
        $this->assertEquals($expected, $result['grid'])
        ;
    }

    /**
     * @param $input
     * @param $expected
     * @param $steps
     * @dataProvider dataForProcessSteps
     */
    public function testProcessSteps($input, $expected, $steps)
    {
        $result = ['grid' => $input];
        for ($i = 0; $i < $steps; $i++) {
            $result = $this->answer->processStep($result['grid']);
        }
        $this->assertEquals($expected, $result['grid']);
    }

    public function dataForProcessSteps()
    {
        return [
            [
                [
                    [5,4,8,3,1,4,3,2,2,3,],
                    [2,7,4,5,8,5,4,7,1,1,],
                    [5,2,6,4,5,5,6,1,7,3,],
                    [6,1,4,1,3,3,6,1,4,6,],
                    [6,3,5,7,3,8,5,4,7,8,],
                    [4,1,6,7,5,2,4,6,4,5,],
                    [2,1,7,6,8,4,1,7,2,1,],
                    [6,8,8,2,8,8,1,1,3,4,],
                    [4,8,4,6,8,4,8,5,5,4,],
                    [5,2,8,3,7,5,1,5,2,6,]
                ],
                [
                    [6,5,9,4,2,5,4,3,3,4,],
                    [3,8,5,6,9,6,5,8,2,2,],
                    [6,3,7,5,6,6,7,2,8,4,],
                    [7,2,5,2,4,4,7,2,5,7,],
                    [7,4,6,8,4,9,6,5,8,9,],
                    [5,2,7,8,6,3,5,7,5,6,],
                    [3,2,8,7,9,5,2,8,3,2,],
                    [7,9,9,3,9,9,2,2,4,5,],
                    [5,9,5,7,9,5,9,6,6,5,],
                    [6,3,9,4,8,6,2,6,3,7,]
                ],
                1
            ],
            [
                [
                    [5,4,8,3,1,4,3,2,2,3,],
                    [2,7,4,5,8,5,4,7,1,1,],
                    [5,2,6,4,5,5,6,1,7,3,],
                    [6,1,4,1,3,3,6,1,4,6,],
                    [6,3,5,7,3,8,5,4,7,8,],
                    [4,1,6,7,5,2,4,6,4,5,],
                    [2,1,7,6,8,4,1,7,2,1,],
                    [6,8,8,2,8,8,1,1,3,4,],
                    [4,8,4,6,8,4,8,5,5,4,],
                    [5,2,8,3,7,5,1,5,2,6,]
                ],
                [
                    [2,2,6,3,0,3,1,9,7,7,],
                    [0,9,2,3,0,3,1,6,9,7,],
                    [0,0,3,2,2,2,1,1,5,0,],
                    [0,0,4,1,1,1,1,1,6,3,],
                    [0,0,7,6,1,9,1,1,7,4,],
                    [0,0,5,3,4,1,1,1,2,2,],
                    [0,0,4,2,3,6,1,1,2,0,],
                    [5,5,3,2,2,4,1,1,2,2,],
                    [1,5,3,2,2,4,7,2,1,1,],
                    [1,1,3,2,2,3,0,2,1,1,],
                ],
                4
            ],
            [
                [
                    [5,4,8,3,1,4,3,2,2,3,],
                    [2,7,4,5,8,5,4,7,1,1,],
                    [5,2,6,4,5,5,6,1,7,3,],
                    [6,1,4,1,3,3,6,1,4,6,],
                    [6,3,5,7,3,8,5,4,7,8,],
                    [4,1,6,7,5,2,4,6,4,5,],
                    [2,1,7,6,8,4,1,7,2,1,],
                    [6,8,8,2,8,8,1,1,3,4,],
                    [4,8,4,6,8,4,8,5,5,4,],
                    [5,2,8,3,7,5,1,5,2,6,]
                ],
                [
                    [0,4,8,1,1,1,2,9,7,6,],
                    [0,0,3,1,1,1,2,0,0,9,],
                    [0,0,4,1,1,1,2,5,0,4,],
                    [0,0,8,1,1,1,1,4,0,6,],
                    [0,0,9,9,1,1,1,3,0,6,],
                    [0,0,9,3,5,1,1,2,3,3,],
                    [0,4,4,2,3,6,1,1,3,0,],
                    [5,5,3,2,2,5,2,3,5,0,],
                    [0,5,3,2,2,5,0,6,0,0,],
                    [0,0,3,2,2,4,0,0,0,0,],
                ],
                10
            ],
        ];
    }

    public function testCountFlashes()
    {
        $result = ['grid' => [
            [5,4,8,3,1,4,3,2,2,3,],
            [2,7,4,5,8,5,4,7,1,1,],
            [5,2,6,4,5,5,6,1,7,3,],
            [6,1,4,1,3,3,6,1,4,6,],
            [6,3,5,7,3,8,5,4,7,8,],
            [4,1,6,7,5,2,4,6,4,5,],
            [2,1,7,6,8,4,1,7,2,1,],
            [6,8,8,2,8,8,1,1,3,4,],
            [4,8,4,6,8,4,8,5,5,4,],
            [5,2,8,3,7,5,1,5,2,6,]
        ]];
        $flashes = 0;
        for ($i = 0; $i < 10; $i++) {
            $result = $this->answer->processStep($result['grid']);
            $flashes+= count($result['flashes']);
        }
        $this->assertEquals(204, $flashes);
    }

    public function testTwo()
    {
        $input = [
            '5483143223',
            '2745854711',
            '5264556173',
            '6141336146',
            '6357385478',
            '4167524645',
            '2176841721',
            '6882881134',
            '4846848554',
            '5283751526',
        ];
        $this->assertEquals(195, $this->answer->two($input));
    }
}
